#!/bin/bash
# ================================================================================
# ELDAP: Easy LDAP: Install and configure openLDAP on Debian GNU/Linux
#
# Copyright © 2012 Jesús Lara Giménez (phenobarbital) <jesuslarag@gmail.com>
# Version: 2.0  
#
#    Developed by Jesus Lara (phenobarbital) <jesuslara@phenobarbital.info>
#    https://github.com/phenobarbital/easyldap
#    
#    License: GNU GPL version 3  <http://gnu.org/licenses/gpl.html>.
#    This is free software: you are free to change and redistribute it.
#    There is NO WARRANTY, to the extent permitted by law.
#
# ================================================================================

### Configure program ##

# common functions
if [ -e /usr/lib/easyldap/easyldap.sh ]; then
    . /usr/lib/easyldap/easyldap.sh
else
    . ./lib/easyldap.sh
fi

# get configuration
configdir

DEBUG='false'
VERBOSE='false'
PASS=''

if [ "$(id -u)" != "0" ]; then
   error "==== MUST BE RUN AS ROOT ====" >&2
   exit 1
fi

usage() {
	echo "Usage: $(basename $0) {install|uninstall|backup|test} [-d|--domain=DOMAIN] [--debug] [-h|--help]"
}

help() {
	usage
cat <<EOF

This script is a helper to install and configure openLDAP on
Debian systems.
The script will install openldap, configure DIT for ldap tree,
overlays, modules, logging and basic ACL.

Commands:
  install                    Install OpenLDAP Server
  uninstall                  Uninstall openLDAP Server
  backup                     Create a backup of OpenLDAP Server
  test                       Test configuration

Options:
  -d, --domain               Define a Domain Name
  --debug                    Enable debugging information
  -r, --role                 role-based script for running in server after installation
  Help options:
      --help     give this help list
      --usage	 Display brief usage message
      --version  print program version
EOF
#	echo ''
#	get_version
	exit 1
}

# si no pasamos ningun parametro
if [ $# = 0 ]; then
    usage
    exit 0
fi

### main execution program ###

test_ldap()
{
	# discover hostname
	get_hostname
	# discover domain
	get_domain
	# get base_dn
	get_basedn
	
	SERVERNAME=$NAME.$DOMAIN

testsummary=$(cat << _MSG

 ************************** [ Installing Easy-LDAP ] *************************
 *
 * Domain : ....................... $DOMAIN
 * LDAP Server Hostname : ......... $SERVERNAME
 * Base DN : ...................... $BASE_DN
 *
 *****************************************************************************

_MSG
)
echo "$testsummary"

info "Testing for Package installation, wait a few minutes ... "

for package in "${BASE_PKGS[@]}"
do
test_package "$package"
	if [ $? -ne 0 ]; then
		error "Can't install package $package, please check your apt repository"
		exit 1
	fi
done

for package in "${PACKAGES[@]}"
do
test_package "$package"
	if [ $? -ne 0 ]; then
		error "Can't install package $package, please check your apt repository"
		exit 1
	fi
done

for package in "${SASL_PKGS[@]}"
do
test_package "$package"
	if [ $? -ne 0 ]; then
		error "Can't install package $package, please check your apt repository"
		exit 1
	fi
done

info "You can install Easy-LDAP in this configuration, Cheers!"
}

# erase all configuration, database and slapd packages
uninstall_ldap() {

warning "Uninstall ERASE all configuracion and database from openldap; this option can't be undone"
read -p "Continue with uninstall (y/n)?" WORK

	if [ "$WORK" != "y" ]; then
		exit 0
	fi
	
	for package in "${PACKAGES[@]}"
	do
		is_installed "$package"
		if [ $? -eq 0 ]; then
			# esta instalado
			remove_package "$package"
		fi
	done
	$INSTALLER purge $LDAP_SERVER
	# remove directories
	rm -fR $LDAP_DIRECTORY
	rm -fR $DB_DIRECTORY
	
info "Done, Easy-LDAP was uninstalled"
}

# install ldap with all options in a basic DIT
install_ldap()
{
	# discover hostname
	get_hostname
	# discover domain
	get_domain
	# get base_dn
	get_basedn
	
	SERVERNAME=$NAME.$DOMAIN

testsummary=$(cat << _MSG

 ************************** [ Installing Easy-LDAP ] *************************
 *
 * Domain : ....................... $DOMAIN
 * LDAP Server Hostname : ......... $SERVERNAME
 * Base DN : ...................... $BASE_DN
 *
 *****************************************************************************

_MSG
)
echo "$testsummary"

info "Easy-LDAP need to install some packages"
read -p "Continue with installation (y/n)?" WORK

	if [ "$WORK" != "y" ]; then
		exit 0
	fi

# pre-configuration
cat <<EOF > /etc/host.conf
multi on
order hosts,bind

EOF

# incorporo las reglas del LDAP en host.allow
echo "slapd: $SERVERNAME" >> /etc/hosts.allow

# configure ldap.conf
cat <<EOF > /etc/ldap/ldap.conf
#
# LDAP Defaults
#
BASE    $BASE_DN
URI     ldap://$SERVERNAME:389 ldaps://$SERVERNAME:636
SIZELIMIT       $SIZELIMIT
TIMELIMIT       $TIMELIMIT
EOF

# setup base packages
packages=$(IFS=$' '; echo "${BASE_PKGS[*]}")
debug "installing $packages"
install_package $packages
if [ $? -ne 0 ]; then
	error "Can't install base packages, please check your apt repository"
	exit 1
fi

# for package in "${BASE_PKGS[@]}"
#do
#install_package "$package"
#	if [ $? -ne 0 ]; then
#		error "Can't install package $package, please check your apt repository"
#		exit 1
#	fi
#done

# setup utilities
# echo $packages
packages=$(IFS=$' '; echo "${PACKAGES[*]}")
debug "installing $packages"
install_package $packages
if [ $? -ne 0 ]; then
	error "Can't install utilities, please check your apt repository"
	exit 1
fi	
	
for package in "${SASL_PKGS[@]}"
do
install_package "$package"
	if [ $? -ne 0 ]; then
		error "Can't install package $package, please check your apt repository"
		exit 1
	fi
done

# install ldap-server
install_package $LDAP_SERVER ldap-utils

sleep 1

debug "Configure OpenLDAP"
ldapfunctions

### configure openLDAP

ldap_configure
	if [ $? -ne 0 ]; then
		error "Can't configure openLDAP, error in configuration"
		exit 1
	fi

# finish him!
test_config

echo
echo "First restart ..."
$SERVICE $LDAP_SERVER restart
sleep 1
echo
echo "Remember: Admin Bind DN is:"
echo "cn=admin,$BASE_DN"

info " [ Easy-LDAP Installed ]"

}

COMMAND=$1
shift
# processing arguments
ARGS=`getopt -n$0 -u -a -o r:n:d:l:hv --longoptions debug,usage,verbose,version,help,role::,domain:: -- "$@"`
eval set -- "$ARGS"
while [ $# -gt 0 ]; do
	case "$1" in
        -d|--domain)
			optarg_check $1 "$2"
            check_domain $2
            DOMAIN=$2
            shift
            ;;
        -r|--role)
			optarg_check $1 "$2"
            ROLENAME=$2
            shift
            ;;        
        --debug)
            DEBUG='true'
            ;;
        --verbose)
            VERBOSE='true'
            ;;     
        -v|--version)
			get_version
			exit 0;;
        -h|--help)
            help
            exit 1
            ;;
        --)
            break;;
        -?)
            exit 1
            ;;
        *)
            usage
            exit 1
            ;;
	esac
    shift
done

case "$COMMAND" in
    -h|-help|--help) help;;
    install)   install_ldap;;
    uninstall)  uninstall_ldap;;
    test)    test_ldap;;
    backup)  backup_ldap;;
    *)        usage;;
esac

# = end = #

exit 0
